configfile: "config/config.yaml"
import os

rule all:
    input:
        "results/kinship/last_check_kinship_keep_fam",
        "results/PCA/population_PCA.html",
        "resources/eur_ids.txt"

rule prepare_correct_x:
    input:
        fam= config["input_plink"],
    output:
        mergex="results/pre_imputation_QC/prepared_xmerge.fam",
        splitx="results/pre_imputation_QC/prepared_xsplit.fam",
        XhetMiss="results/pre_imputation_QC/prepared_xhetMiss.fam",
    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        mergex=lambda wildcards, output: output["mergex"][:-4],
        splitx=lambda wildcards, output: output["splitx"][:-4],
        XhetMiss=lambda wildcards, output: output["XhetMiss"][:-4],
        hg_reference= config["genome_ref"]["version"],
    conda: "envs/plink.yaml"
    shell:
        """
        plink \
        --bfile {params.plink_in} \
        --merge-x no-fail \
        --make-bed \
        --out {params.mergex}
        
        plink \
        --bfile {params.mergex} \
        --split-x {params.hg_reference} no-fail \
        --make-bed \
        --out {params.splitx}
        
        plink \
        --bfile {params.splitx} \
        --set-hh-missing \
        --make-bed \
        --out {params.XhetMiss}
        """


rule genotyping05:
    input:
        fam="results/pre_imputation_QC/prepared_xhetMiss.fam",
    output:
        fam="results/pre_imputation_QC/Geno05.fam",
    params:
        vcr1= config["CR_filters"]["variant_CR1"],
    conda: "envs/plink.yaml"
    shell:
        """
        infile={input.fam}
        outfile={output.fam}

        plink \
        --bfile ${{infile::-4}} \
        --geno {params.vcr1} \
        --make-bed \
        --out ${{outfile::-4}}
        """

rule SampleCallrate98_sex: 
    input:
        "results/pre_imputation_QC/Geno05.fam"
    output:
        "results/pre_imputation_QC/Geno05_SCRSex.fam"
    params:
        scr1= config["CR_filters"]["sample_CR1"],
    conda: "envs/plink.yaml"
    shell:
        """
        infile={input}
        outfile={output}
        plink \
        --bfile ${{infile::-4}} \
        --mind {params.scr1} \
        --check-sex \
        --make-bed \
        --out ${{outfile::-4}}
        
        echo "sex problems:" #prints the text sex problems
        grep -P "PROBLEM|STATUS" "${{outfile::-4}}".sexcheck
        """



rule get_heterozygosity:
    input:
        "results/pre_imputation_QC/Geno05_SCRSex.fam"
    output:
        cases="results/pre_imputation_QC/Geno05_SCRSex_cases.het",
        conts="results/pre_imputation_QC/Geno05_SCRSex_controls.het",
    params:
        infile=lambda wildcards, input: input[0][:-4],
        cases=lambda wildcards, output: output["cases"][:-4],
        conts=lambda wildcards, output: output["conts"][:-4],
    conda: "envs/plink.yaml"
    shell:    
        """
        plink \
        --bfile {params.infile} \
        --het \
        --filter-cases \
        --out {params.cases}

        plink \
        --bfile {params.infile} \
        --het \
        --filter-controls \
        --out {params.conts}
        """

rule check_heterozygosity:
    input:
        cases="results/pre_imputation_QC/Geno05_SCRSex_cases.het",
        conts="results/pre_imputation_QC/Geno05_SCRSex_controls.het",
    output:
        exclude_list="results/pre_imputation_QC/Geno05_CRSex_het_exclude.txt",
    conda: "envs/R.yaml"
    shell:
        """
        Rscript scripts/check_het.R \
        --cases {input.cases} \
        --conts {input.conts} \
        --outfile {output} 
        """

rule VariantCallrate98:
    input:
        "results/pre_imputation_QC/Geno05_SCRSex.fam"
    output:
        "results/pre_imputation_QC/Geno05_SCRSex_VCR.fam"
    params:
        infile=lambda wildcards, input: input[0][:-4],
        outfile=lambda wildcards, output: output[0][:-4],
        vcr2=config["CR_filters"]["variant_CR2"],
    conda:
        "envs/plink.yaml"
    shell:
        """
        plink \
        --bfile {params.infile} \
        --geno {params.vcr2} \
        --make-bed \
        --out {params.outfile}
        """

rule get_MissDiff_HWE:
    input:
        "results/pre_imputation_QC/Geno05_SCRSex_VCR.fam"
    output:
        "results/pre_imputation_QC/Geno05_SCRSex_VCR_case.lmiss",
        "results/pre_imputation_QC/Geno05_SCRSex_VCR_con.lmiss",
        "results/pre_imputation_QC/Geno05_SCRSex_VCR_all.hwe",
        "results/pre_imputation_QC/Geno05_SCRSex_VCR_female.hwe",
        
    params:
        infile=lambda wildcards, input: input[0][:-4],
    conda: "envs/plink.yaml"
    shell:
        """
        plink \
        --bfile {params.infile} \
        --filter-cases \
        --missing \
        --out {params.infile}_case

        plink \
        --bfile {params.infile} \
        --filter-controls \
        --missing \
        --out {params.infile}_con

        plink \
        --bfile {params.infile} \
        --hardy \
        --out {params.infile}_all

        plink \
        --bfile {params.infile} \
        --hardy \
        --chr 23 \
        --filter-females \
        --out {params.infile}_female
        """    
        

rule check_MissDiff_HWE:
    input:    
        miss_case="results/pre_imputation_QC/Geno05_SCRSex_VCR_case.lmiss",
        miss_cont="results/pre_imputation_QC/Geno05_SCRSex_VCR_con.lmiss",
        hwe_all="results/pre_imputation_QC/Geno05_SCRSex_VCR_all.hwe",
        hwe_female="results/pre_imputation_QC/Geno05_SCRSex_VCR_female.hwe",
    output:
        "results/pre_imputation_QC/remove_missingness_hwe.txt",
    conda: "envs/R.yaml"
    shell:
        """
        Rscript workflow/scripts/check_miss_hwe.R \
         --miss_case {input.miss_case} \
         --miss_cont {input.miss_cont} \
         --hwe_all {input.hwe_all} \
         --hwe_female {input.hwe_female} \
         --outfile {output} 
         """
        
rule filter_MissDiff_HWE:    
    input:
        fam="results/pre_imputation_QC/Geno05_SCRSex_VCR.fam",
        miss_list="results/pre_imputation_QC/remove_missingness_hwe.txt",
    output:
        "results/pre_imputation_QC/Geno05_SCRSex_VCR_MiHwe.fam"
    params:
        infile=lambda wildcards, input: input[0][:-4],
        outfile=lambda wildcards, output: output[0][:-4],
    conda: "envs/plink2.yaml"
    shell:
        """
        plink2 \
        --bfile {params.infile} \
        --exclude {input.miss_list} \
        --set-all-var-ids @:#:\$r:\$a \
        --make-bed \
        --out {params.outfile}
        """


rule download_1000G_sample_info:
    output:
        ped_file_1000G="results/PCA/20130606_g1k.ped" # contig = chr1, ...
    resources: cpus=1, mem_mb=3000, time_job=720
    params:
        partition='batch'
    shell:
        """
        cd results/PCA/
        wget -nc ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/working/20130606_sample_info/20130606_g1k.ped #downloading data from a specific url(no clobber)
        """


rule prepare_1000G_for_ancestry_PCA_step1:
    input:
        bcf1000G=config["location_1000G"]+"ALL.chr{contig}.phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.bcf",
        fasta=config["fasta"]
    output:
        vcf="results/1000G/1000G_chr{contig}.bcf",
    resources: cpus=1, mem_mb=18000, time_job=720
    conda: "envs/bcftools.yaml"
    params:
        partition='batch',
        maf1=config["pca_1000G"]["bcf_maf"],
    shell:
        """
        if bcftools view -q {params.maf1}:minor "{input.bcf1000G}" | \
        bcftools norm -m-any --check-ref w -f "{input.fasta}" | \
        bcftools annotate -x ID -I +'%CHROM:%POS:%REF:%ALT' | \
        bcftools norm -Ob --rm-dup both \
        > {output.vcf} ; then
        echo "no error"
        fi
        
        bcftools index {output.vcf}
        """
        
rule prepare_1000G_for_ancestry_PCA_step2:
    input:
        fam="results/pre_imputation_QC/Geno05_SCRSex_VCR_MiHwe.fam",
        vcf="results/1000G/1000G_chr{contig}.bcf",
    output:
        variant_list="results/1000G/1000G_chr{contig}.vars",
        bed2="results/1000G/1000G_chr{contig}_pruned.bed"
    resources: cpus=1, mem_mb=18000, time_job=720
    conda: "envs/plink.yaml"
    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        partition='batch',
        bed1="results/1000G/1000G_chr{contig}",
        bed2="results/1000G/1000G_chr{contig}_pruned",
        hg_reference= config["genome_ref"]["version"],
        maf2= config["pca_1000G"]["pca_maf"],
        win_size= config["pca_1000G"]["window_size"],
        win_shift= config["pca_1000G"]["window_shift"],
        r2= config["pca_1000G"]["r2"],
    shell:
        """
        plink --noweb \
        --bcf {input.vcf} \
        --keep-allele-order \
        --vcf-idspace-to _ \
        --allow-extra-chr 0 \
        --split-x {params.hg_reference} no-fail \
        --make-bed \
        --out {params.bed1}
        
        cut -f2 {params.plink_in}.bim > {output.variant_list}
        
        plink --noweb \
        --bfile {params.bed1} \
        --extract {output.variant_list} \
        --maf {params.maf2} --indep {params.win_size} {params.win_shift} {params.r2} \
        --make-bed \
        --out {params.bed2}
        """
        
        
rule merge_data_w_1000G_run_PCA:
    input:
        _1000G_data=expand("results/1000G/1000G_chr{contig}_pruned.bed", contig=config["contigs_wo_X"]), 
        fam="results/pre_imputation_QC/Geno05_SCRSex_VCR_MiHwe.fam",
        ped_file_1000G="results/PCA/20130606_g1k.ped"
    output:
        merge_list="results/1000G/merge_list.txt",
        bim_pca="results/PCA/MergeFullForPCA.bim",
        out_pca="results/PCA/pca.eigenvec",
    resources: cpus=1, mem_mb=18000, time_job=720
    params:
        partition='batch',
        plink_in=lambda wildcards, input: input["fam"][:-4],
        plink_out=lambda wildcards, output: output["out_pca"][:-9]
    conda: "envs/plink.yaml"
    shell:
        """
        echo {input._1000G_data} | tr " " "\\n" | sed 's/.bed//g' > {output.merge_list}
        plink --merge-list {output.merge_list} --out results/1000G/Merged
        awk '{{ print $2 }}' results/1000G/Merged.bim > results/1000G/MergeVariants.txt

        plink --bfile {params.plink_in} \
        --extract results/1000G/MergeVariants.txt \
        --make-bed \
        --out results/1000G/cohort

        printf "results/1000G/Merged\\nresults/1000G/cohort" > results/1000G/ForMergeFull.list

        plink --merge-list results/1000G/ForMergeFull.list --out results/PCA/MergeFullForPCA

        awk '{{ print $1,$2 }}' results/1000G/Merged.fam | awk '$(NF+1) = "1000G"' > results/PCA/clusters.txt
        awk '{{ print $1,$2 }}' results/1000G/cohort.fam | awk '$(NF+1) = "Cohort"' >> results/PCA/clusters.txt

        plink \
        --bfile results/PCA/MergeFullForPCA \
        --pca-cluster-names 1000G \
        --pca \
        --within results/PCA/clusters.txt \
        --out {params.plink_out}

        """

rule make_pca_plots:
    input:
        eigenvec="results/PCA/pca.eigenvec",
        ped="results/PCA/20130606_g1k.ped",
    output:
        html="results/PCA/population_PCA.html",
        populations="results/PCA/populations.txt",
    conda: "envs/R.yaml"
    shell:
        """
        cp -f workflow/scripts/populations_PCA.R results/PCA/populations_PCA.R
        cd results/PCA/
        Rscript -e 'library(rmarkdown); rmarkdown::render("populations_PCA.R","html_document")'
        #Rscript populations_PCA.R {input.eigenvec} {input.ped} {output.html}
        """

rule run_pca_filter:
    input:
        eigenvec_file="results/PCA/pca.eigenvec",
    output:
        eur_outfile="resources/eur_ids.txt",
        non_eur_outfile="resources/non_eur_ids.txt",
    params:
        pc1_min=config["pca_filters_eur"]["pc1_min"],
        pc1_max=config["pca_filters_eur"]["pc1_max"],
        pc2_min=config["pca_filters_eur"]["pc2_min"],
        pc2_max=config["pca_filters_eur"]["pc2_max"],
    conda:"envs/R.yaml"
    shell:
        """
        Rscript workflow/scripts/pca_filter.R \ 
        --pc1_min {params.pc1_min} \
        --pc1_max {params.pc1_max} \
        --pc2_min {params.pc2_min} \
        --pc2_max {params.pc2_max} \
        --eigenvec_file {input.eigenvec_file} \
        --eur_outfile {output.eur_outfile} \
        --non_eur_outfile {output.non_eur_outfile}
        """

rule filter_plink_for_ancestry:
    input:
        fam="results/pre_imputation_QC/Geno05_SCRSex_VCR_MiHwe.fam",
        non_europ_exclude="resources/non_eur_ids.txt",
    output:
        keep_fam="results/PCA/non_europ_exclude.fam",
        fam="results/PCA/cohort_eur.fam",
    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        plink_out=lambda wildcards, output: output["fam"][:-4],
    conda: "envs/plink2.yaml"
    shell:
        """
        grep -vf {input.non_europ_exclude} {input.fam} > {output.keep_fam}

        plink2 \
        --bfile {params.plink_in} \
        --keep {output.keep_fam} \
        --require-pheno \
        --make-bed \
        --out {params.plink_out}

        """

rule kinship_analysis:
    input:
        fam="results/PCA/cohort_eur.fam",
    output:#primary/secondary kinship coefficients
        kinship_file1="results/kinship/Geno05_CR_sex_snp_qc_snpqc2_EUR.kin",
        kinship_file2="results/kinship/Geno05_CR_sex_snp_qc_snpqc2_EUR.kin0",
    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        out_folder="results/kinship",
        prefix=lambda wildcards, output: output["kinship_file1"][:-4],
    conda: "envs/king.yaml"
    shell:
        """
        mkdir -p {params.out_folder}
        king \
        -b {params.plink_in}.bed \
        --kinship \
        --prefix {params.prefix}
        """

rule kinship_analysis_R:
    input:
        fam="results/PCA/cohort_eur.fam",
        kinship_file1="results/kinship/Geno05_CR_sex_snp_qc_snpqc2_EUR.kin",
        kinship_file2="results/kinship/Geno05_CR_sex_snp_qc_snpqc2_EUR.kin0",
    output:
        kinship_keep="results/kinship/keep_ids.fam",
    conda: "envs/R.yaml"
    shell:
        """
        Rscript workflow/scripts/kinship_analysis.R \
        --fam_file {input.fam} \
        --kinship_file1 {input.kinship_file1} \
        --kinship_file2 {input.kinship_file2} \
        --outfile {output.kinship_keep} 
        """

rule remove_relateds:
    input:
        fam="results/PCA/cohort_eur.fam",
        kinship_keep="results/kinship/keep_ids.fam",
    output:
        fam="results/kinship/cohort_eur_unrelated.fam",
    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        plink_out=lambda wildcards, output: output["fam"][:-4],
    conda: "envs/plink2.yaml"
    shell:
        """
        plink2 \
        --bfile {params.plink_in} \
        --keep {input.kinship_keep} \
        --require-pheno \
        --make-bed \
        --out {params.plink_out}

        """

rule kinship_check2:
    input:
        fam="results/kinship/cohort_eur_unrelated.fam",
    output:
        kinship_file1="results/kinship/last_check_kinship.kin",
        kinship_file2="results/kinship/last_check_kinship.kin0",

    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        out_folder="results/kinship",
        prefix=lambda wildcards, output: output["kinship_file1"][:-4],
    conda: "envs/king.yaml"
    shell:
        """
        king \
        -b {params.plink_in}.bed \
        --kinship \
        --prefix {params.prefix}
        """
        
rule kinship_check2_R:
    input:
        fam="results/kinship/cohort_eur_unrelated.fam",
        kinship_file1="results/kinship/last_check_kinship.kin",
        kinship_file2="results/kinship/last_check_kinship.kin0",
    output:
        kinship_keep="results/kinship/last_check_kinship_keep_fam",
    conda: "envs/R.yaml"
    shell:
        """
        Rscript workflow/scripts/kinship_analysis.R \
        --fam_file {input.fam} \
        --kinship_file1 {input.kinship_file1} \
        --kinship_file2 {input.kinship_file2} \
        --outfile {output.kinship_keep}

        echo "length of original fam file:"
        cat {input.fam} | sort -u | wc -l 

        echo "length of pruned fam file:"
        cat {output.kinship_keep} | sort -u | wc -l 

        """


################################################
################################################
