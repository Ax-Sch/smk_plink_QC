configfile: "config/config.yaml"
import os


rule all:
    input:
        "results/D_Sex_check/check_sex_scatter.html",
        "results/E_Get_heterozygosity/Het_check_Fcoeff_cases_hist.pdf",
        "results/E_Get_heterozygosity/Het_check_Fcoeff_controls_hist.pdf",
        "results/H_1000G_PCA/H_PCA_plots/populations_PCA.html",
        "results/H_1000G_PCA/H_PCA_plots/populations.txt",
        "results/H_1000G_PCA/H_PCA_filter/non_eur_ids.txt",
        "results/I_Kinship_analysis/kinship_plot.html",
        "results/I_Kinship_analysis/last_check_kinship_keep_fam",


rule A_Prepare_correct_x:
    input:
        fam= config["input_plink"],
    output:
        mergex="results/A_Prepare_correct_x/Prepared_xmerge.fam",
        splitx="results/A_Prepare_correct_x/Prepared_xsplit.fam",
        XhetMiss="results/A_Prepare_correct_x/Prepared_xhetMiss.fam",
    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        mergex=lambda wildcards, output: output["mergex"][:-4],
        splitx=lambda wildcards, output: output["splitx"][:-4],
        XhetMiss=lambda wildcards, output: output["XhetMiss"][:-4],
        hg_reference= config["genome_ref"]["version"],
    conda: "envs/plink.yaml"
    shell:
        """
        plink \
        --bfile {params.plink_in} \
        --merge-x no-fail \
        --make-bed \
        --out {params.mergex}
        
        plink \
        --bfile {params.mergex} \
        --split-x {params.hg_reference} no-fail \
        --make-bed \
        --out {params.splitx}
        
        plink \
        --bfile {params.splitx} \
        --set-hh-missing \
        --make-bed \
        --out {params.XhetMiss}
        """
 
rule B_Genotyping95:
    input:
        fam="results/A_Prepare_correct_x/Prepared_xhetMiss.fam",
    output:
        fam="results/B_Genotyping95/Geno95.fam",
    params:
        vcr1= config["CR_filters"]["variant_CR1"],
    conda: "envs/plink.yaml"
    shell:
        """
        infile={input.fam}
        outfile={output.fam}

        plink \
        --bfile ${{infile::-4}} \
        --geno {params.vcr1} \
        --make-bed \
        --out ${{outfile::-4}}
        """
rule C_SampleCallrate98:
    input:
        "results/B_Genotyping95/Geno95.fam",
    output:
        "results/C_SampleCallrate98/Geno05_SCR.fam"
    params:
        scr1= config["CR_filters"]["sample_CR1"],
    conda: "envs/plink.yaml"
    shell:
        """
        infile={input}
        outfile={output}
        plink \
        --bfile ${{infile::-4}} \
        --mind {params.scr1} \
        --make-bed \
        --out ${{outfile::-4}}
        """

rule D_Sex_check:
    input:
        fam= "results/C_SampleCallrate98/Geno05_SCR.fam",
    output:
        sexcheck= "results/D_Sex_check/Geno05_SCR.sexcheck",
    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        plink_out= lambda wildcards, output: output["sexcheck"][:-9],
        female_max_F= config["F_coefficent"]["female_max_F"],
        male_min_F= config["F_coefficent"]["male_min_F"],
    conda: "envs/plink.yaml"
    shell:
        """
        plink \
        --bfile {params.plink_in} \
        --check-sex {params.female_max_F} {params.male_min_F} \
        --allow-no-sex \
        --out {params.plink_out}
        """

rule D_Graph_Sex_check:
    input:
        sexcheck= "results/D_Sex_check/Geno05_SCR.sexcheck"
    output:
        problem_sex="results/D_Sex_check/sex_check_problem_sex.txt",
        remove_ids="results/D_Sex_check/sex_check_problem_ids.txt",
        sexcheck_graph="results/D_Sex_check/check_sex_scatter.html",
    conda: "envs/R.yaml"
    shell:
        """
        cp -f workflow/scripts/check_sex_scatter.R results/D_Sex_check/check_sex_scatter.R
        cd results/D_Sex_check/
        Rscript -e 'library(rmarkdown); rmarkdown::render("check_sex_scatter.R","html_document")'
#        Rscript workflow/scripts/check_sex.R \
#        --sexcheckfile {input.sexcheck} \
#        --problem_sex_info {output.problem_sex} \
#        --problem_sex_ids {output.remove_ids} \
#        --f_coeff_graph {output.sexcheck_graph}
        """

rule D_Filter_sex_checked:
    input:
        infile="results/C_SampleCallrate98/Geno05_SCR.fam",
        remove_ids="results/D_Sex_check/sex_check_problem_ids.txt",
    output:
        outfile="results/D_Sex_check/Geno05_SCRSex_checked.fam",
    params:
        infile=lambda wildcards, input: input["infile"][:-4],
        outfile= lambda wildcards, output: output["outfile"][:-4],
    conda: "envs/plink.yaml"
    shell:
        """
        plink \
        --bfile {params.infile} \
        --remove {input.remove_ids} \
        --make-bed \
        --out {params.outfile}
        """

rule E_Get_heterozygosity:
    input:
        "results/D_Sex_check/Geno05_SCRSex_checked.fam"
    output:
        cases="results/E_Get_heterozygosity/Geno05_SCRSex_checked_cases.het",
        conts="results/E_Get_heterozygosity/Geno05_SCRSex_checked_controls.het",
    params:
        conts=lambda wildcards, output: output["conts"][:-4],
        infile=lambda wildcards, input: input[0][:-4],
        cases=lambda wildcards, output: output["cases"][:-4],
    conda: "envs/plink.yaml"
    shell:
        """
        plink \
        --bfile {params.infile} \
        --het \
        --filter-cases \
        --out {params.cases}
        
        plink \
        --bfile {params.infile} \
        --het \
        --filter-controls \
        --out {params.conts}
        """

rule E_Check_heterozygosity:
    input:
        cases="results/E_Get_heterozygosity/Geno05_SCRSex_checked_cases.het",
        conts="results/E_Get_heterozygosity/Geno05_SCRSex_checked_controls.het",
    output:
        exclude_list="results/E_Get_heterozygosity/Geno05_SCRSex_checked_het_exclude.txt",
        graph_cases="results/E_Get_heterozygosity/Het_check_Fcoeff_cases_hist.pdf",
        graph_controls="results/E_Get_heterozygosity/Het_check_Fcoeff_controls_hist.pdf",
    params:
        lower_cutoff= config["F_coefficent"]["lower_cutoff"],
        upper_cutoff= config["F_coefficent"]["upper_cutoff"],
    conda: "envs/R.yaml"
    shell:
        """
        Rscript workflow/scripts/check_het.R \
        --cases {input.cases} \
        --conts {input.conts} \
        --lower_cutoff {params.lower_cutoff} \
        --upper_cutoff {params.upper_cutoff} \
        --outfile {output.exclude_list} \
        --outgraph_cases {output.graph_cases} \
        --outgraph_controls {output.graph_controls} 
        """

rule E_Filter_het_samples:
    input:
        exclude_list="results/E_Get_heterozygosity/Geno05_SCRSex_checked_het_exclude.txt",
        infile= "results/D_Sex_check/Geno05_SCRSex_checked.fam",
    output:
        remove_ids="results/E_Get_heterozygosity/het_exclude_ids.txt",
        outfile="results/E_Get_heterozygosity/Geno05_SCRSex_checked_het.fam",
    params:
        infile=lambda wildcards, input: input["infile"][:-4],
        outfile= lambda wildcards, output: output["outfile"][:-4],
    conda: "envs/plink.yaml"
    shell:
        """
        tail -n +2 {input.exclude_list} | awk '{{print $1 "\t" $2}}' > {output.remove_ids}

        plink \
        --bfile {params.infile} \
        --remove {output.remove_ids} \
        --make-bed \
        --out {params.outfile}
        """


rule F_VariantCallrate98:
    input:
        "results/E_Get_heterozygosity/Geno05_SCRSex_checked_het.fam",
    output:
        "results/F_VariantCallrate98/Geno05_SCRSex_checked_het_VCR.fam",
    params:
        infile=lambda wildcards, input: input[0][:-4],
        outfile=lambda wildcards, output: output[0][:-4],
        vcr2=config["CR_filters"]["variant_CR2"],
    conda:
        "envs/plink.yaml"
    shell:
        """
        plink \
        --bfile {params.infile} \
        --geno {params.vcr2} \
        --make-bed \
        --out {params.outfile}
        """

rule G_Get_MissDiff_HWE:
    input:
        fam="results/F_VariantCallrate98/Geno05_SCRSex_checked_het_VCR.fam",
    output:
        case= "results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR_case.lmiss",
        con= "results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR_con.lmiss",
        all= "results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR_all.hwe",
        female= "results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR_female.hwe",
    params:
        infile=lambda wildcards, input: input["fam"][:-4],
        outfile_prefix="results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR" ,
    conda: "envs/plink.yaml"
    shell:
        """

        plink \
        --bfile {params.infile} \
        --filter-cases \
        --missing \
        --out {params.outfile_prefix}_case

        plink \
        --bfile {params.infile} \
        --filter-controls \
        --missing \
        --out {params.outfile_prefix}_con

        plink \
        --bfile {params.infile} \
        --hardy \
        --out {params.outfile_prefix}_all

        plink \
        --bfile {params.infile} \
        --hardy \
        --chr 23 \
        --filter-females \
        --out {params.outfile_prefix}_female
        """    
        

rule G_Check_MissDiff_HWE:
    input:    
        miss_case="results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR_case.lmiss",
        miss_cont="results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR_con.lmiss",
        hwe_all="results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR_all.hwe",
        hwe_female="results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR_female.hwe",
    output:
        "results/G_MissDiff_HWE/remove_missingness_hwe.txt",
    params:
        miss_diff=config["HWE"]["miss_diff"],
        p1=config["HWE"]["non_x_up"],
        p2=config["HWE"]["non_x_ap"],
        p3=config["HWE"]["x_ap"]
    conda: "envs/R.yaml"
    shell:
        """
        Rscript workflow/scripts/check_miss_hwe.R \
         --miss_case {input.miss_case} \
         --miss_cont {input.miss_cont} \
         --hwe_all {input.hwe_all} \
         --hwe_female {input.hwe_female} \
         --miss_diff {params.miss_diff} \
         --non_x_up {params.p1} \
         --non_x_ap {params.p2} \
         --x_ap {params.p3} \
         --outfile {output} 
         """
        
rule G_Filter_MissDiff_HWE:
    input:
        fam="results/F_VariantCallrate98/Geno05_SCRSex_checked_het_VCR.fam",
        miss_list="results/G_MissDiff_HWE/remove_missingness_hwe.txt",
    output:
        "results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR_MiHwe.fam",
    params:
        infile=lambda wildcards, input: input[0][:-4],
        outfile=lambda wildcards, output: output[0][:-4],
    conda: "envs/plink2.yaml"
    shell:
        """
        plink2 \
        --bfile {params.infile} \
        --exclude {input.miss_list} \
        --make-bed \
        --out {params.outfile}
        """

rule H_Change_ID_for_1000G_PCA:
    input:
        fam="results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR_MiHwe.fam"
    output:
        "results/H_1000G_PCA/Geno05_SCRSex_checked_het_VCR_MiHwe_new_IDs.fam"
    params:
        infile=lambda wildcards, input: input[0][:-4],
        outfile=lambda wildcards, output: output[0][:-4],
    conda: "envs/plink2.yaml"
    shell:
        """
        plink2 \
        --bfile {params.infile} \
        --set-all-var-ids @:#:\$r:\$a \
        --make-bed \
        --out {params.outfile}
        """
#################PCA_for_ancestry####################

rule H_Download_1000G_sample_info:
    output:
        ped_file_1000G="resources/H_1000G/H_ped/20130606_g1k.ped"
    resources: cpus=1, mem_mb=3000, time_job=720
    params:
        partition='batch'
    shell:
        """
        cd resources/H_1000G/H_ped/
        wget -nc ftp.1000genomes.ebi.ac.uk/vol1/ftp/technical/working/20130606_sample_info/20130606_g1k.ped #downloading data from a specific url(no clobber)

        """

if config["genome_ref"]["version"]=="b37":
    include:"rules/version37_pca.smk"
elif config["genome_ref"]["version"]=="b38":
    include:"rules/version38_pca.smk"


rule H_Prepare_1000G_for_ancestry_PCA_step2:
    input:
        fam="results/H_1000G_PCA/Geno05_SCRSex_checked_het_VCR_MiHwe_new_IDs.fam",
        vcf="results/H_1000G_PCA/H_step1/1000G_chr{contig}.bcf",
    output:
        variant_list="results/H_1000G_PCA/H_step2/1000G_chr{contig}.vars",
        bed2="results/H_1000G_PCA/H_step2/1000G_chr{contig}_pruned.bed"
    resources: cpus=1, mem_mb=18000, time_job=720
    conda: "envs/plink.yaml"
    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        partition='batch',
        bed1="results/H_1000G_PCA/H_step2/1000G_chr{contig}",
        bed2="results/H_1000G_PCA/H_step2/1000G_chr{contig}_pruned",
        hg_reference= config["genome_ref"]["version"],
        maf2= config["pca_1000G"]["pca_maf"],
        win_size= config["pca_1000G"]["window_size"],
        win_shift= config["pca_1000G"]["window_shift"],
        r2= config["pca_1000G"]["r2"],
    shell:
        """
        plink --noweb \
        --bcf {input.vcf} \
        --keep-allele-order \
        --vcf-idspace-to _ \
        --allow-extra-chr 0 \
        --split-x {params.hg_reference} no-fail \
        --make-bed \
        --out {params.bed1}

        cut -f2 {params.plink_in}.bim > {output.variant_list}
        
        plink --noweb \
        --bfile {params.bed1} \
        --extract {output.variant_list} \
        --maf {params.maf2} --indep {params.win_size} {params.win_shift} {params.r2} \
        --make-bed \
        --out {params.bed2}
        """
        
        
rule H_Merge_data_w_1000G_run_PCA_step3:
    input:
        _1000G_data=expand("results/H_1000G_PCA/H_step2/1000G_chr{contig}_pruned.bed", contig=config["contigs_wo_X"]), 
        fam="results/H_1000G_PCA/Geno05_SCRSex_checked_het_VCR_MiHwe_new_IDs.fam",
        ped_file_1000G="resources/H_1000G/H_ped/20130606_g1k.ped"
    output:
        merge_list="results/H_1000G_PCA/H_step3/merge_list.txt",
        bim_pca="results/H_1000G_PCA/H_step3/MergeFullForPCA.bim",
        out_pca="results/H_1000G_PCA/H_PCA_plots/pca.eigenvec",
    resources: cpus=1, mem_mb=18000, time_job=720
    params:
        partition='batch',
        plink_in=lambda wildcards, input: input["fam"][:-4],
        plink_out=lambda wildcards, output: output["out_pca"][:-9]
    conda: "envs/plink.yaml"
    shell:
        """
        echo {input._1000G_data} | tr " " "\\n" | sed 's/.bed//g' > {output.merge_list}
        plink --merge-list {output.merge_list} --out results/H_1000G_PCA/H_step3/Merged
        awk '{{ print $2 }}' results/H_1000G_PCA/H_step3/Merged.bim > results/H_1000G_PCA/H_step3/MergeVariants.txt

        plink --bfile {params.plink_in} \
        --extract results/H_1000G_PCA/H_step3/MergeVariants.txt \
        --make-bed \
        --out results/H_1000G_PCA/H_step3/cohort

        printf "results/H_1000G_PCA/H_step3/Merged\\nresults/H_1000G_PCA/H_step3/cohort" > results/H_1000G_PCA/H_step3/ForMergeFull.list

        plink --merge-list results/H_1000G_PCA/H_step3/ForMergeFull.list --out results/H_1000G_PCA/H_step3/MergeFullForPCA

        awk '{{ print $1,$2 }}' results/H_1000G_PCA/H_step3/Merged.fam | awk '$(NF+1) = "1000G"' > results/H_1000G_PCA/H_step3/clusters.txt
        awk '{{ print $1,$2 }}' results/H_1000G_PCA/H_step3/cohort.fam | awk '$(NF+1) = "Cohort"' >> results/H_1000G_PCA/H_step3/clusters.txt

        plink \
        --bfile results/H_1000G_PCA/H_step3/MergeFullForPCA \
        --pca-cluster-names 1000G \
        --pca \
        --within results/H_1000G_PCA/H_step3/clusters.txt \
        --out {params.plink_out}

        """

rule H_Make_PCA_plots:
    input:
        eigenvec="results/H_1000G_PCA/H_PCA_plots/pca.eigenvec",
        #ped="resourses/H_1000G/H_ped/20130606_g1k.ped",
    output:
        html="results/H_1000G_PCA/H_PCA_plots/populations_PCA.html",
        populations="results/H_1000G_PCA/H_PCA_plots/populations.txt",
    conda: "envs/R.yaml"
    shell:
        """
        cp -f workflow/scripts/populations_PCA.R results/H_1000G_PCA/H_PCA_plots/populations_PCA.R
        cd results/H_1000G_PCA/H_PCA_plots
        Rscript -e 'library(rmarkdown); rmarkdown::render("populations_PCA.R","html_document")'
        """

rule H_Run_pca_filter:
    input:
        eigenvec_file="results/H_1000G_PCA/H_PCA_plots/pca.eigenvec",
    output:
        eur_outfile="results/H_1000G_PCA/H_PCA_filter/eur_ids.txt",
        non_eur_outfile="results/H_1000G_PCA/H_PCA_filter/non_eur_ids.txt",
    params:
        pc1_min=config["pca_ancestry_filters"]["pc1_min"],
        pc1_max=config["pca_ancestry_filters"]["pc1_max"],
        pc2_min=config["pca_ancestry_filters"]["pc2_min"],
        pc2_max=config["pca_ancestry_filters"]["pc2_max"],
    conda:"envs/R.yaml"
    shell:
        """
        Rscript workflow/scripts/pca_filter.R \
        --pc1_min {params.pc1_min} \
        --pc1_max {params.pc1_max} \
        --pc2_min {params.pc2_min} \
        --pc2_max {params.pc2_max} \
        --eigenvec_file {input.eigenvec_file} \
        --eur_outfile {output.eur_outfile} \
        --non_eur_outfile {output.non_eur_outfile}
        """

rule H_Filter_plink_for_ancestry:
    input:
        fam="results/G_MissDiff_HWE/Geno05_SCRSex_checked_het_VCR_MiHwe.fam",
        europ_include="results/H_1000G_PCA/H_PCA_filter/eur_ids.txt",
    output:
        keep_fam="results/H_1000G_PCA/H_PCA_filter/non_europ_excluded.fam",
        fam="results/H_1000G_PCA/H_PCA_filter/cohort_eur.fam",
    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        plink_out=lambda wildcards, output: output["fam"][:-4],
    conda: "envs/plink2.yaml"
    shell:
        """
        grep -F -f {input.europ_include} {input.fam} > {output.keep_fam}

        plink2 \
        --bfile {params.plink_in} \
        --keep {output.keep_fam} \
        --require-pheno \
        --make-bed \
        --out {params.plink_out}

        """

rule I_Kinship_analysis:
    input:
        fam="results/H_1000G_PCA/H_PCA_filter/cohort_eur.fam",
    output:
        kinship_file1="results/I_Kinship_analysis/Geno05_CR_sex_snp_qc_snpqc2_EUR.kin",
        kinship_file2="results/I_Kinship_analysis/Geno05_CR_sex_snp_qc_snpqc2_EUR.kin0",
    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        out_folder="results/I_Kinship_analysis",
        prefix=lambda wildcards, output: output["kinship_file1"][:-4],
    conda: "envs/king.yaml"
    shell:
        """
        mkdir -p {params.out_folder}
        king \
        -b {params.plink_in}.bed \
        --kinship \
        --prefix {params.prefix}
        """       


rule I_kinship_analysis_R:
    input:
        fam="results/H_1000G_PCA/H_PCA_filter/cohort_eur.fam",
        kinship_file1="results/I_Kinship_analysis/Geno05_CR_sex_snp_qc_snpqc2_EUR.kin",
        kinship_file2="results/I_Kinship_analysis/Geno05_CR_sex_snp_qc_snpqc2_EUR.kin0",
    output:
        kinship_keep="results/I_Kinship_analysis/keep_ids.fam",
    params:
        kinship=config["Kinship"]["cutoff1"]
    conda: "envs/R.yaml"
    shell:
        """
        Rscript workflow/scripts/kinship_analysis.R \
        --fam_file {input.fam} \
        --kinship_file1 {input.kinship_file1} \
        --kinship_file2 {input.kinship_file2} \
        --kinship_cutoff {params.kinship} \
        --outfile {output.kinship_keep} 
        """

rule I_remove_relateds:
    input:
        fam="results/H_1000G_PCA/H_PCA_filter/cohort_eur.fam",
        kinship_keep="results/I_Kinship_analysis/keep_ids.fam",
    output:
        fam="results/I_Kinship_analysis/cohort_eur_unrelated.fam",
    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        plink_out=lambda wildcards, output: output["fam"][:-4],
    conda: "envs/plink2.yaml"
    shell:
        """
        plink2 \
        --bfile {params.plink_in} \
        --keep {input.kinship_keep} \
        --require-pheno \
        --make-bed \
        --out {params.plink_out}

        """

rule I_Kinship_check2:
    input:
        fam="results/I_Kinship_analysis/cohort_eur_unrelated.fam",
    output:
        kinship_file1="results/I_Kinship_analysis/last_check_kinship.kin",
        kinship_file2="results/I_Kinship_analysis/last_check_kinship.kin0",

    params:
        plink_in=lambda wildcards, input: input["fam"][:-4],
        out_folder="results/I_Kinship_analysis",
        prefix=lambda wildcards, output: output["kinship_file1"][:-4],
    conda: "envs/king.yaml"
    shell:
        """
        king \
        -b {params.plink_in}.bed \
        --kinship \
        --prefix {params.prefix}
        """
        
rule I_Kinship_check2_R:
    input:
        fam="results/I_Kinship_analysis/cohort_eur_unrelated.fam",
        kinship_file1="results/I_Kinship_analysis/last_check_kinship.kin",
        kinship_file2="results/I_Kinship_analysis/last_check_kinship.kin0",
    output:
        kinship_keep="results/I_Kinship_analysis/last_check_kinship_keep_fam",
    params:
        kinship=config["Kinship"]["cutoff2"]
    conda: "envs/R.yaml"
    shell:
        """
        Rscript workflow/scripts/kinship_analysis.R \
        --fam_file {input.fam} \
        --kinship_file1 {input.kinship_file1} \
        --kinship_file2 {input.kinship_file2} \
        --kinship_cutoff {params.kinship} \
        --outfile {output.kinship_keep}

        echo "length of original fam file:"
        cat {input.fam} | sort -u | wc -l 

        echo "length of pruned fam file:"
        cat {output.kinship_keep} | sort -u | wc -l 

        """

rule I_kinship_scatter_plot:
    input:
        kinship1="results/I_Kinship_analysis/Geno05_CR_sex_snp_qc_snpqc2_EUR.kin0",
        kinship2="results/I_Kinship_analysis/last_check_kinship.kin0"
    output:
        html= "results/I_Kinship_analysis/kinship_plot.html"
    conda: "envs/R.yaml"

    shell:
        """
        cp -f workflow/scripts/kinship_plot.R results/I_Kinship_analysis/kinship_plot.R
        cd results/I_Kinship_analysis/
        Rscript -e 'library(rmarkdown); rmarkdown::render("kinship_plot.R","html_document")'
        """
################################################
################################################
